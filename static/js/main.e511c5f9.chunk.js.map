{"version":3,"sources":["models/project.js","App.jsx","serviceWorker.js","index.js"],"names":["Project","name","url","plugin","platform","description","creator","creatorUrl","this","App","projects","renderCover","project","toLowerCase","src","process","alt","renderPlatformTags","color","className","style","padding","justify","Title","gutter","map","span","key","href","onClick","console","log","hoverable","cover","title","buildProjectCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAYeA,EAXX,WAAYC,EAAMC,EAAKC,EAAQC,EAAUC,EAAaC,EAASC,GAAY,oBACvEC,KAAKP,KAAOA,EACZO,KAAKN,IAAMA,EACXM,KAAKL,OAASA,EACdK,KAAKJ,SAAWA,EAChBI,KAAKH,YAAcA,EACnBG,KAAKF,QAAUA,EACfE,KAAKD,WAAaA,G,sECoEXE,G,OArEH,WACV,IAAMC,EAAW,CAAC,IAAIV,EAAQ,SAAS,wDAAwD,UAAU,MAAO,2DAA4D,WAAY,+BACtK,IAAIA,EAAQ,cAAe,wDAAyD,UAAW,MAAO,6JAA6J,gBAAgB,oCACnR,IAAIA,EAAQ,WAAY,4DAA6D,QAAS,MAAO,qLAAqL,gBAAgB,qCAEtTW,EAAc,SAACC,GACnB,OAAOA,EAAQT,OAAOU,eACpB,IAAK,UACH,OAAO,yBAAKC,IAAKC,kCAA8CC,IAAI,iBACrE,IAAK,UACH,OAAO,yBAAKF,IAAKC,kCAA8CC,IAAI,iBACrE,IAAK,QACH,OAAO,yBAAKF,IAAKC,gCAA4CC,IAAI,eACnE,QACE,SAIAC,EAAqB,SAACb,GAC1B,OAAOA,EAASS,eACd,IAAK,MACH,OAAO,6BAAK,kBAAC,IAAD,CAAKK,MAAM,SAAX,WAAgC,kBAAC,IAAD,CAAKA,MAAM,YAAX,QAC9C,IAAK,MACH,OAAO,kBAAC,IAAD,CAAKA,MAAM,YAAX,OACT,IAAK,UACH,OAAO,kBAAC,IAAD,CAAKA,MAAM,SAAX,WACT,QACE,SA8BN,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAACC,QAAQ,SACnC,kBAAC,IAAD,CAAKC,QAAQ,UACX,kBAAC,IAAWC,MAAZ,yBAEF,kBAAC,IAAD,CAAKC,OAAQ,GAAIF,QAAQ,UAZpBZ,EAASe,KAAI,SAACb,GACnB,OApBqB,SAACA,GACxB,OACI,kBAAC,IAAD,CAAKc,KAAM,EAAGC,IAAKf,EAAQX,MACzB,uBAAG2B,KAAMhB,EAAQV,KACjB,kBAAC,IAAD,CAAM2B,QAAS,WAAKC,QAAQC,IAAI,YAAaC,WAAS,EAACC,MACnDtB,EAAYC,IAEd,kBAAC,IAAD,CAAMsB,MAAO,6BAAK,8BAAOtB,EAAQX,MAAY,0BAAMkB,UAAU,aAAaF,EAAmBL,EAAQR,YAAyBC,YAAaO,EAAQP,cACnJ,kBAAC,IAAD,MACA,2CACa,uBAAGuB,KAAMhB,EAAQL,YAAaK,EAAQN,aAWrD6B,CAAiBvB,U,OC/CPwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.e511c5f9.chunk.js","sourcesContent":["class Project {\n    constructor(name, url, plugin, platform, description, creator, creatorUrl){\n        this.name = name;\n        this.url = url;\n        this.plugin = plugin;\n        this.platform = platform;\n        this.description = description;\n        this.creator = creator;\n        this.creatorUrl = creatorUrl;\n    }\n}\n\nexport default Project","import React from 'react';\nimport Project from './models/project'\nimport { Card, Col, Row, Tag, Typography, Divider } from 'antd';\nimport Meta from 'antd/lib/card/Meta';\n\nimport './App.css'\n\nconst App = ()=>{\n  const projects = [new Project(\"EZShop\",\"https://github.com/AppsFlyerSDK/appsflyer-flutter-app\",\"Flutter\",\"all\", \"Your place to create shareable lists in a few easy steps\", \"ShaharAF\", \"https://github.com/ShaharAF\"),\n                    new Project(\"Let's cook!\", \"https://github.com/AppsFlyerSDK/appsflyer-cordova-app\", \"Cordova\", \"all\", \"Need ideas for some new recipes? let's cook is your place. Enter the ingredients that you want to make food with and the app will find you awsome recipes.\",\"amit-kremer93\",\"https://github.com/amit-kremer93\"),\n                    new Project(\"Mopicker\", \"https://github.com/AppsFlyerSDK/appsflyer-apple-swift-app\", \"Swift\", \"iOS\", \"Mopicker is a sample app, that has been written in native Swift programming language using SwiftUI and Combine frameworks in order to demonstrate the AppsflyerSDK implementation.\",\"af-obodovskyi\",\"https://github.com/af-obodovskyi\")]\n\n  const renderCover = (project)=>{\n    switch(project.plugin.toLowerCase()){\n      case 'flutter':\n        return <img src={process.env.PUBLIC_URL + '/flutter_logo.png'} alt=\"Flutter logo\"/>\n      case 'cordova':\n        return <img src={process.env.PUBLIC_URL + '/cordova_logo.png'} alt=\"Cordova logo\"/>\n      case 'swift':\n        return <img src={process.env.PUBLIC_URL + '/swift_logo.png'} alt=\"Swift logo\"/>\n      default:\n        return;\n    }\n  }\n\n  const renderPlatformTags = (platform) => {\n    switch(platform.toLowerCase()){\n      case 'all':\n        return <div><Tag color=\"green\">Android</Tag><Tag color=\"geekblue\">iOS</Tag></div>\n      case 'ios':\n        return <Tag color=\"geekblue\">iOS</Tag>\n      case 'android':\n        return <Tag color=\"green\">Android</Tag>\n      default:\n        return;\n    }\n  }\n\n  const buildProjectCard = (project) => {\n    return (\n        <Col span={6} key={project.name}>\n          <a href={project.url}>\n          <Card onClick={()=>{console.log(\"clicked\")}} hoverable cover={\n              renderCover(project)\n          }>\n            <Meta title={<div><span>{project.name}</span><span className=\"rightSpan\">{renderPlatformTags(project.platform)}</span></div>} description={project.description}/>\n            <Divider/>\n            <div>\n              Created by <a href={project.creatorUrl}>{project.creator}</a>\n            </div>\n          </Card>\n          </a>\n        </Col>\n    )\n  }\n\n  const buildProjectCards = ()=>{\n    return projects.map((project)=>{\n      return (\n          buildProjectCard(project) \n        )\n    });\n  }\n\n  return (\n    <div className=\"App\" style={{padding:\"12px\"}}>\n      <Row justify=\"center\">\n        <Typography.Title>Our sample apps</Typography.Title>\n      </Row>\n      <Row gutter={12} justify=\"center\">\n        {buildProjectCards()}\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}